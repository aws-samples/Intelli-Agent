openapi: "3.0.1"
info:
  title: "aics-api"
  description: "AI-Customer-Service - Core API"
  version: "2024-09-05T01:54:32Z"
servers:
- url: "https://{hostUrl}.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "prod"
paths:
# Chat
  /llm:
    post:
      summary: Chat
      description: |
        POST /llm - This endpoint sends query input by the user to the agent.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/LLMRequestA"
                - $ref: "#/components/schemas/LLMRequestB"
            examples:
              exampleForLLMRequestA:
                summary: Example for LLMRequestA
                value: 
                  entry_type: "common"
                  query: "What are the benefits of cloud computing?"
                  session_id: "fe6a5054-1889-4d3f-8e94-ab636d014515"
                  user_id: "14a81498-a071-70c4-08e9-09503e99720c"
                  chatbot_config:
                    agent_config:
                      only_use_rag_tool: false
                    chatbot_id: "demo"
                    chatbot_mode: "agent"
                    default_llm_config:
                      model_id: "anthropic.claude-3-sonnet-20240229-v1:0"
                      model_kwargs:
                        max_tokens: 1000
                        temperature: 0.01
                    enable_trace: true
                    group_name: "Admin"
                    use_history: true
              exampleForLLMRequestB:
                summary: Example for LLMRequestB
                value:
                  entry_type: "common"
                  query: "What are the benefits of cloud computing?"
                  session_id: "fe6a5054-1889-4d3f-8e94-ab636d014515"
                  user_id: "14a81498-a071-70c4-08e9-09503e99720c"
                  chatbot_max_rounds_in_memory: 7
                  chatbot_group_name: "Admin"
                  chatbot_id: "demo"
                  chatbot_mode: "agent"
                  chatbot_use_history: true
                  chatbot_enable_trace: true
                  chatbot_use_websearch: false
                  llm_model_id: "anthropic.claude-3-sonnet-20240229-v1:0"
                  llm_temperature: 0.01
                  llm_max_tokens: 1000
                  private_knowledge_top_k: 5
                  private_knowledge_score: 0.56
                  only_use_rag_tool: false
                  param_type: "flat"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []

# Chatbot
  # /chatbot-management/embeddings:
  #   get:
  #     responses:
  #       "400":
  #         description: "400 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "500":
  #         description: "500 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "200":
  #         description: "200 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #     security:
  #     - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
  # /chatbot-management/chatbots/{proxy+}:
  #   get:
  #     parameters:
  #     - name: "proxy"
  #       in: "path"
  #       required: true
  #       schema:
  #         type: "string"
  #     responses:
  #       "400":
  #         description: "400 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "500":
  #         description: "500 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "200":
  #         description: "200 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #     security:
  #     - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
  /chatbot-management/chatbots:
    get:
      summary: List chatbots
      description: |
        GET /chatbot-management/chatbots - This endpoint retrieves a list of chatbots. The results can be paginated using the 'max_items' and 'page_size' query parameters.
      parameters:
      - name: "page_size"
        in: "query"
        schema:
          type: "string"
        description: Maximum number of items to return
      - name: page_size
        in: query
        schema:
          type: integer
        description: Number of items per page
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/aicusapicoj51o7moLWF0z"
      security:
      - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
    post:
      summary: Create chatbots
      description: |
        POST /chatbot-management/chatbots - This endpoint creates chatbot for intention injection and chat conversation.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/aicusapicoXPDy1YuPTCzQ"
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/aicusapicoM92ois3mRqdG"
      security:
      - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
  # /chatbot-management/check-chatbot:
  #   post:
  #     responses:
  #       "400":
  #         description: "400 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "500":
  #         description: "500 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "200":
  #         description: "200 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #     security:
  #     - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []    

# Intention
  /intention/executions:
    get:
      summary: List upload batch of intention management 
      description: |
        GET /intention/executions - This endpoint retrieves a list of batch. The results can be paginated using the 'max_items' and 'page_size' query parameters.
      parameters:
      - name: "max_items"
        in: "query"
        schema:
          type: "string"
        description: Maximum number of items to return
      - name: page_size
        in: query
        schema:
          type: integer
        description: Number of items per page
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/aicusapicoIEpQmiPSwa8a"
      security:
      - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
    post:
      summary: Create intention upload batch
      description: |
        POST /intention/executions - This endpoint creates upload batch for intention injection.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/aicusapicoICmkVHXXdPT7"
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/aicusapicoW39avaSeAfwl"
      security:
      - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
  /intention/executions/{executionId}:
    get:
      summary: Detail a upload batch of intention management 
      description: |
        GET /intention/executions/{executionId} - This endpoint retrieves details of a batch. The result contains execution details and injection details .
      parameters:
      - name: "executionId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/aicsaiapicohmy8hNMRxNWN"
      security:
      - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
  # /intention/execution-presigned-url:
  #   post:
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/aicsaiapicoS7193iOfsONP"
  #       required: true
  #     responses:
  #       "400":
  #         description: "400 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "500":
  #         description: "500 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "200":
  #         description: "200 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/aicsaiapicoFa1ujqwjnv8W"
  #     security:
  #     - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
  # /intention/download-template:
  #   get:
  #     responses:
  #       "400":
  #         description: "400 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "500":
  #         description: "500 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "200":
  #         description: "200 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #     security:
  #     - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
  # /intention/index-used-scan:
  #   post:
  #     responses:
  #       "400":
  #         description: "400 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "500":
  #         description: "500 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "200":
  #         description: "200 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #     security:
  #     - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []

# Prompt  
  /prompt-management/prompts:
    get:
      summary: List prompts
      description: |
        GET /prompt-management/prompts - This endpoint retrieves a list of prompts. The results can be paginated using the 'max_items' and 'page_size' query parameters.
      parameters:
        - name: max_items
          in: query
          schema:
            type: integer
          description: Maximum number of items to return
        - name: page_size
          in: query
          schema:
            type: integer
          description: Number of items per page
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
    post:
      summary: Create prompts
      description: |
        POST /prompt-management/prompts - This endpoint creates RAG/conversation summary/tool calling prompts for a chatbot.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePromptRequest"
            example:
              ChatbotId: demo
              GroupName: Admin
              ModelId: anthropic.claude-3-haiku-20240307-v1:0
              Prompt:
                conversation_summary:
                  few_shots: |
                    [\n  {\n    \"conversation\": [\n      {\n        \"role\": \"human\",\n        \"content\": \"Hello, I would like to know what to do if I do not agree with any decision.\"\n      },\n      {\n        \"role\": \"ai\",\n        \"content\": \"disagree with our decision about your monthly income adjustment amounts?\"\n      },\n      {\n        \"role\": \"human\",\n        \"content\": \"no. Where can I find my SHIP contact information?\"\n      },\n      {\n        \"role\": \"ai\",\n        \"content\": \"You can find your local SHIP contact information in the back of your Medicare & You 2020 Handbook online.\"\n      },\n      {\n        \"role\": \"human\",\n        \"content\": \"and how do they calculate the adjustments?\"\n      }\n    ],\n    \"rewrite_query\": \"How is the calculation for adjustments made by SHIP determined?\"\n  },\n  {\n    \"conversation\": [\n      {\n        \"role\": \"human\",\n        \"content\": \"I need to know how to prepare for college.\"\n      },\n      {\n        \"role\": \"ai\",\n        \"content\": \"You should first define your goals and interest and be sure to know the costs and how to plan financially and academically for college.\"\n      },\n      {\n        \"role\": \"human\",\n        \"content\": \"Is there something I can use as a guide to get ready for it?\"\n      }\n    ],\n    \"rewrite_query\": \"What resources or guides can I use to help me prepare for college?\"\n  },\n  {\n    \"conversation\": [\n      {\n        \"role\": \"human\",\n        \"content\": \"垃圾\"\n      }\n    ],\n    \"rewrite_query\": \"垃圾\"\n  },\n  {\n    \"conversation\": [\n      {\n        \"role\": \"human\",\n        \"content\": \"你好\"\n      }\n    ],\n    \"rewrite_query\": \"你好\"\n  }\n]
                  system_prompt: You are a helpful, pattern-following assistant.
                  user_prompt: "Given the following conversation between PersonU and PersonA:\n{conversation}\nInstead of having this entire conversation, how can PersonU get what he or she is\nlooking for using a single sentence? Keep the recent sentence of PersonU: “{current_query}” to be same if it is already self-explanatory. Don't make any explanations."
                rag:
                  system_prompt: You are a customer service agent, and answering user's query. You ALWAYS follow these guidelines when writing your response:\n<guidelines>\n- NERVER say \"根据搜索结果/大家好/谢谢/根据这个文档...\".\n- 回答简单明了\n- 如果问题与<docs>里面的内容不相关，请回答 \"根据内部知识库，找不到相关内容\"，不需要额外补充内容\n</guidelines>\n\nHere are some documents for you to reference for your query.\n<docs>\n{context}\n</docs>
                tool_calling:
                  user_prompt: "你是一个AI助理。今天是{date},{weekday}."
                  guidelines_prompt: |
                    "<guidlines>\n- Don't forget to output <function_calls> </function_calls> when any tool is called.\n- 每次回答总是先进行思考，并将思考过程写在<thinking>标签中。请你按照下面的步骤进行思考:\n    1. 判断根据当前的上下文是否足够回答用户的问题。\n    2. 如果当前的上下文足够回答用户的问题，请调用 `give_final_response` 工具。\n    3. 如果当前的上下文不能支持回答用户的问题，你可以考虑调用<tools> 标签中列举的工具。\n    4. 如果调用工具对应的参数不够，请调用反问工具 `give_rhetorical_question` 来让用户提供更加充分的信息。\n    5. 最后给出你要调用的工具名称。\n- Always output with the same language as the content within <query></query>. If the content is english, use englisth to output. If the content is chinese, use chinese to output.\n</guidlines>\n"
              Scene: common
              SortKey: anthropic.claude-3-haiku-20240307-v1:0__common__titanv2
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []

  # /prompt-management/scenes:
  #   get:
  #     responses:
  #       "400":
  #         description: "400 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "500":
  #         description: "500 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "200":
  #         description: "200 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #     security:
  #     - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
  # /prompt-management/models:
  #   get:
  #     responses:
  #       "400":
  #         description: "400 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "500":
  #         description: "500 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "200":
  #         description: "200 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #     security:
  #     - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
  # /prompt-management/prompts/{proxy+}:
  #   get:
  #     parameters:
  #     - name: "proxy"
  #       in: "path"
  #       required: true
  #       schema:
  #         type: "string"
  #     responses:
  #       "400":
  #         description: "400 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "500":
  #         description: "500 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "200":
  #         description: "200 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #     security:
  #     - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
  #   delete:
  #     parameters:
  #     - name: "proxy"
  #       in: "path"
  #       required: true
  #       schema:
  #         type: "string"
  #     responses:
  #       "400":
  #         description: "400 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "500":
  #         description: "500 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "200":
  #         description: "200 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #     security:
  #     - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []

# Chat history
  # /chat-history:
  #   post:
  #     responses:
  #       "400":
  #         description: "400 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "500":
  #         description: "500 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #       "200":
  #         description: "200 response"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Empty"
  #     security:
  #     - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
  /chat-history/sessions:
    get:
      summary: List chat sessions
      description: |
        GET /chat-history/sessions - This endpoint retrieves a list of chat sessions. The results can be paginated using the 'max_items' and 'page_size' query parameters.
      parameters:
        - name: max_items
          in: query
          schema:
            type: integer
          description: Maximum number of items to return
        - name: page_size
          in: query
          schema:
            type: integer
          description: Number of items per page
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
  /chat-history/messages:
    get:
      summary: List chat messages
      description: |
        GET /chat-history/messages - This endpoint retrieves a list of chat messages in a chat session. The results can be paginated using the 'max_items' and 'page_size' query parameters.
      parameters:
        - name: session_id
          in: query
          schema:
            type: string
          description: Chat session id which contains chat messages, e.g. b8a34e07-48ad-417c-9ddc-f2801ebf6a47
        - name: max_items
          in: query
          schema:
            type: integer
          description: Maximum number of items to return
        - name: page_size
          in: query
          schema:
            type: integer
          description: Number of items per page
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0: []
components:
  schemas:
    aicsaiapicopvCPtvHlfMt6:
      title: "PostPayload"
      required:
      - "executionId"
      type: "object"
      properties:
        executionId:
          type: "array"
          items:
            type: "string"
    Empty:
      title: "Empty Schema"
      type: "object"
    aicsaiapicolKK6o7ptLSTP:
      title: "ResponsePayload"
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "string"
        message:
          type: "string"
    aicusapicoICmkVHXXdPT7:
      title: "PostPayload"
      required:
      - "chatbotId"
      - "index"
      - "model"
      - "s3Bucket"
      - "s3Prefix"
      type: "object"
      properties:
        chatbotId:
          type: "string"
        index:
          type: "string"
        model:
          type: "string"
        s3Prefix:
          type: "string"
        s3Bucket:
          type: "string"
    aicusapicoIEpQmiPSwa8a:
      title: "ResponsePayload"
      type: "object"
      properties:
        Config:
          type: "object"
          properties:
            PageSize:
              type: "integer"
            MaxItems:
              type: "integer"
        Items:
          type: "array"
          items:
            required:
            - "chatbotId"
            - "createBy"
            - "createTime"
            - "details"
            - "executionId"
            - "executionStatus"
            - "fileName"
            - "index"
            - "model"
            - "tag"
            type: "object"
            properties:
              executionId:
                type: "string"
              fileName:
                type: "string"
              createBy:
                type: "string"
              chatbotId:
                type: "string"
              createTime:
                type: "string"
              executionStatus:
                type: "string"
              index:
                type: "string"
              model:
                type: "string"
              details:
                type: "string"
              tag:
                type: "string"
        Count:
          type: "integer"
    aicusapicoM92ois3mRqdG:
      title: "ResponsePayload"
      type: "object"
      properties:
        chatbotId:
          type: "string"
        groupName:
          type: "string"
        indexIds:
          type: "object"
          properties:
            qq:
              type: "string"
            qd:
              type: "string"
            intention:
              type: "string"
        Message:
          type: "string"
    aicsaiapicoFa1ujqwjnv8W:
      title: "ResponsePayload"
      type: "object"
      properties:
        data:
          type: "string"
        message:
          type: "string"
        s3Prefix:
          type: "string"
        s3Bucket:
          type: "string"
    aicusapicoW39avaSeAfwl:
      title: "ResponsePayload"
      type: "object"
      properties:
        result:
          type: "string"
        execution_id:
          type: "string"
        input_payload:
          type: "object"
          properties:
            chatbotId:
              type: "string"
            groupName:
              type: "string"
            tableItemId:
              type: "string"
            fieldName:
              type: "string"
            index:
              type: "string"
            model:
              type: "string"
    aicusapicoXPDy1YuPTCzQ:
      title: "PostPayload"
      required:
      - "chatbotId"
      - "index"
      - "modelId"
      - "modelName"
      type: "object"
      properties:
        modelName:
          type: "string"
        chatbotId:
          type: "string"
        modelId:
          type: "string"
        index:
          required:
          - "intention"
          - "qd"
          - "qq"
          type: "object"
          properties:
            qq:
              type: "string"
            qd:
              type: "string"
            intention:
              type: "string"
    aicsaiapicoS7193iOfsONP:
      title: "PostPayload"
      required:
      - "content_type"
      - "file_name"
      type: "object"
      properties:
        content_type:
          type: "string"
        file_name:
          type: "string"
    
    aicsaiapicoPUseVtfPvX5T:
      title: "PostPayload"
      required:
      - "content_type"
      - "file_name"
      type: "object"
      properties:
        content_type:
          type: "string"
        file_name:
          type: "string"
    aicsaiapicohmy8hNMRxNWN:
      title: "ResponsePayload"
      type: "object"
      properties:
        Items:
          type: "array"
          items:
            required:
            - "createTime"
            - "executionId"
            - "s3Bucket"
            - "s3Path"
            - "s3Prefix"
            - "status"
            type: "object"
            properties:
              executionId:
                type: "string"
              s3Path:
                type: "string"
              createTime:
                type: "string"
              s3Prefix:
                type: "string"
              s3Bucket:
                type: "string"
              status:
                type: "string"
        Count:
          type: "integer"
    aicusapicoj51o7moLWF0z:
      title: "ResponsePayload"
      type: "object"
      properties:
        chatbot_ids:
          type: "array"
          items:
            type: "string"
        Config:
          type: "object"
          properties:
            PageSize:
              type: "integer"
            MaxItems:
              type: "integer"
        Items:
          type: "array"
          items:
            required:
            - "ChatbotId"
            - "LastModifiedTime"
            - "ModelId"
            - "ModelName"
            type: "object"
            properties:
              ChatbotId:
                type: "string"
              ModelName:
                type: "string"
              LastModifiedTime:
                type: "string"
              ModelId:
                type: "string"
        Count:
          type: "integer"
    aicsaiapicocohEaD85KKTd:
      title: "ResponsePayload"
      type: "object"
      properties:
        Config:
          type: "object"
          properties:
            PageSize:
              type: "integer"
            MaxItems:
              type: "integer"
        Items:
          type: "array"
          items:
            required:
            - "chatbotId"
            - "createTime"
            - "embeddingModelType"
            - "executionId"
            - "executionStatus"
            - "groupName"
            - "indexId"
            - "indexType"
            - "offline"
            - "operationType"
            - "qaEnhance"
            - "s3Bucket"
            - "s3Prefix"
            - "sfnExecutionId"
            - "uiStatus"
            type: "object"
            properties:
              executionStatus:
                type: "string"
              s3Prefix:
                type: "string"
              uiStatus:
                type: "string"
              s3Bucket:
                type: "string"
              qaEnhance:
                type: "string"
              sfnExecutionId:
                type: "string"
              embeddingModelType:
                type: "string"
              offline:
                type: "string"
              executionId:
                type: "string"
              groupName:
                type: "string"
              chatbotId:
                type: "string"
              indexType:
                type: "string"
              createTime:
                type: "string"
              indexId:
                type: "string"
              operationType:
                type: "string"
        Count:
          type: "integer"
    CreatePromptRequest:
      type: object
      required:
        - ChatbotId
        - GroupName
        - ModelId
        - Prompt
        - Scene
        - SortKey
      properties:
        ChatbotId:
          type: string
          description: Chatbot ID, e.g. admin
        GroupName:
          type: string
          description: Cognito group name, e.g. Admin
        ModelId:
          type: string
          description: LLM model ID, e.g. anthropic.claude-3-haiku-20240307-v1:0
        Prompt:
          type: object
          description: Prompt to add to the chatbot
          required:
            - rag
            - conversation_summary
            - tool_calling
          properties:
            conversation_summary:
              type: object
              properties:
                few_shots:
                  type: string
                system_prompt:
                  type: string
                user_prompt:
                  type: string
            rag:
              type: object
              properties:
                system_prompt:
                  type: string
            tool_calling:
              type: object
              properties:
                user_prompt:
                  type: string
                guidelines_prompt:
                  type: string
        Scene:
          type: string
          description: Scene, default is common
        SortKey:
          type: string
          description: A combination with chatbot id, model id and scene, e.g. anthropic.claude-3-haiku-20240307-v1:0__common__titanv2
    LLMRequestA:
      type: object
      properties:
        entry_type:
          type: string
          description: Scenario type, the default is common
        query:
          type: string
          description: Query or question sent to the agent
        session_id:
          type: string
          description: Chat session ID
        user_id:
          type: string
          description: User id
        chatbot_config:
          type: object
          description: Chatbot config used in this chat 
          required:
            - agent_config
            - chatbot_id
            - chatbot_mode
            - default_llm_config
            - enable_trace
            - group_name
            - max_rounds_in_memory
            - private_knowledge_config
            - use_history
          properties:
            agent_config:
              type: object
              properties:
                only_use_rag_tool:
                  type: boolean
            chatbot_id:
              type: string
            chatbot_mode:
              type: string
            default_llm_config:
              type: object
              properties:
                model_id:
                  type: string
                model_kwargs:
                  type: object
                  properties:
                    max_tokens:
                      type: integer
                    temperature:
                      type: number
                      format: float
            enable_trace:
              type: boolean
            group_name:
              type: string
            max_rounds_in_memory:
              type: integer
            private_knowledge_config:
              type: object
              properties:
                top_k: 
                  type: integer
                score:
                  type: number
                  format: float
            use_history:
              type: boolean
            use_websearch:
              type: boolean
        param_type:
          type: string
          description: The input parameter format (flat/nested)
      required:
        - entry_type
        - query
        - session_id
        - user_id
        - chatbot_config
    LLMRequestB:
      type: object
      properties:
        entry_type:
          type: string
          description: Scenario type, the default is common
        query:
          type: string
          description: Query or question sent to the agent
        session_id:
          type: string
          description: Chat session ID
        user_id:
          type: string
          description: User id
        chatbot_max_rounds_in_memory:
          type: integer
          description: Maximum number of rounds of conversation to be stored in memory
        chatbot_group_name:
          type: string
        chatbot_id:
          type: string
        chatbot_mode:
          type: string
        chatbot_use_history:
          type: boolean
        chatbot_enable_trace:
          type: boolean
        chatbot_use_websearch:
          type: boolean
        llm_model_id:
          type: string
        llm_temperature:
          type: number
          format: float
          description: Higher values make the output more random
        llm_max_tokens:
          type: integer
          description: Max length of tokens that LLM process in a sequence
        private_knowledge_top_k:
          type: integer
          description: Number of top documents to retrieve
        private_knowledge_score:
          type: number
          format: float
          description: Outputs with a relevance score below the threshold will not be sent to LLM
        only_use_rag_tool:
          type: boolean
          description: Specifies whether to restrict the system to using only RAG tools
        param_type:
          type: string
          description: The input parameter format (flat/nested)
      required:
        - entry_type
        - query
        - session_id
        - user_id
        - chatbot_max_rounds_in_memory
        - chatbot_group_name
        - chatbot_id 
        - chatbot_mode 
        - chatbot_use_history 
        - chatbot_enable_trace 
        - chatbot_use_websearch 
        - llm_model_id
        - llm_temperature
        - llm_max_tokens
        - private_knowledge_top_k
        - private_knowledge_score
        - only_use_rag_tool
        - param_type
  securitySchemes:
    aicsaicustomerserviceapiconstructApiAuthorizer94F43DD0:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"



