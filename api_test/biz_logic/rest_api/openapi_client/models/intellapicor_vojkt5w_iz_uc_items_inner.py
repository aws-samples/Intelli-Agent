# coding: utf-8

"""
    Intelli-Agent-RESTful-API

    Intelli-Agent RESTful API

    The version of the OpenAPI document: 2024-07-29T06:23:46Z
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class IntellapicorVOJKT5wIzUCItemsInner(BaseModel):
    """
    IntellapicorVOJKT5wIzUCItemsInner
    """ # noqa: E501
    execution_status: StrictStr = Field(alias="executionStatus")
    s3_prefix: StrictStr = Field(alias="s3Prefix")
    ui_status: StrictStr = Field(alias="uiStatus")
    s3_bucket: StrictStr = Field(alias="s3Bucket")
    qa_enhance: StrictStr = Field(alias="qaEnhance")
    sfn_execution_id: StrictStr = Field(alias="sfnExecutionId")
    embedding_model_type: StrictStr = Field(alias="embeddingModelType")
    offline: StrictStr
    execution_id: StrictStr = Field(alias="executionId")
    group_name: StrictStr = Field(alias="groupName")
    chatbot_id: StrictStr = Field(alias="chatbotId")
    index_type: StrictStr = Field(alias="indexType")
    create_time: StrictStr = Field(alias="createTime")
    index_id: StrictStr = Field(alias="indexId")
    operation_type: StrictStr = Field(alias="operationType")
    __properties: ClassVar[List[str]] = ["executionStatus", "s3Prefix", "uiStatus", "s3Bucket", "qaEnhance", "sfnExecutionId", "embeddingModelType", "offline", "executionId", "groupName", "chatbotId", "indexType", "createTime", "indexId", "operationType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntellapicorVOJKT5wIzUCItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntellapicorVOJKT5wIzUCItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "executionStatus": obj.get("executionStatus"),
            "s3Prefix": obj.get("s3Prefix"),
            "uiStatus": obj.get("uiStatus"),
            "s3Bucket": obj.get("s3Bucket"),
            "qaEnhance": obj.get("qaEnhance"),
            "sfnExecutionId": obj.get("sfnExecutionId"),
            "embeddingModelType": obj.get("embeddingModelType"),
            "offline": obj.get("offline"),
            "executionId": obj.get("executionId"),
            "groupName": obj.get("groupName"),
            "chatbotId": obj.get("chatbotId"),
            "indexType": obj.get("indexType"),
            "createTime": obj.get("createTime"),
            "indexId": obj.get("indexId"),
            "operationType": obj.get("operationType")
        })
        return _obj


