{"Flowcharts": "<description>\nThis flow chart represents the process of evaluating and selecting an option based on certain conditions. The workflow begins with the \"Start\" node, which transitions to a step labeled \"Some text.\" From there, the process continues to the \"Continue\" node.\n\nAfter continuing, the process reaches the \"Evaluate\" decision diamond, which branches out into three possible paths:\n\nIf the condition \"One\" is met, the workflow proceeds to \"Option 1.\"\nIf the condition \"Two\" is met, the workflow proceeds to \"Option 2.\"\nIf the condition \"Three\" is met, the workflow proceeds to \"Option 3.\"\nEach option represents a different outcome based on the evaluation criteria.\n</description>\n\n<mermaid>\nflowchart LR\n    A[Start] --Some text--> B(Continue)\n    B --> C{Evaluate}\n    C -- One --> D[Option 1]\n    C -- Two --> E[Option 2]\n    C -- Three --> F[fa:fa-car Option 3]\n</mermaid>", "Sequence diagrams": "<description>\nThis sequence diagram represents the process of a communication exchange between two individuals, Alice and John. The interaction proceeds as follows:\n\nAlice initiates the conversation by sending a message to John: \"Hello John, how are you?\"\nAlice sends another message to John: \"John, can you hear me?\"\nJohn responds to Alice with: \"Hi Alice, I can hear you!\"\nJohn follows up with another message: \"I feel great!\"\nThe diagram illustrates a sequence of messages exchanged between Alice and John, highlighting their communication flow.\n</description>\n\n<mermaid>\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n</mermaid>", "Timeline Diagram": "<description>\nThis timeline diagram represents the process of the Industrial Revolution, detailing its evolution through different phases and technological advancements. The timeline is divided into two main periods: the 17th-20th century and the 21st century.\n\n1. **17th-20th Century**:\n   - **Industry 1.0**: Characterized by the use of machinery, water power, and steam power.\n   - **Industry 2.0**: Marked by the advent of electricity, internal combustion engines, and mass production techniques.\n\n2. **21st Century**:\n   - **Industry 3.0**: Defined by the development and integration of electronics, computers, and automation.\n   - **Industry 4.0**: Focuses on the Internet, robotics, and the Internet of Things (IoT).\n   - **Industry 5.0**: Encompasses advancements in artificial intelligence, big data, and 3D printing.\n\nThe diagram uses vertical dotted lines to connect each industry phase with its corresponding technological innovations, illustrating the progression and transformation of industrial capabilities over time.\n</description>\n\n<mermaid>\ntimeline\n    title Timeline of Industrial Revolution\n    section 17th-20th century\n        Industry 1.0 : Machinery, Water power, Steam <br>power\n        Industry 2.0 : Electricity, Internal combustion engine, Mass production\n        Industry 3.0 : Electronics, Computers, Automation\n    section 21st century\n        Industry 4.0 : Internet, Robotics, Internet of Things\n        Industry 5.0 : Artificial intelligence, Big data,3D printing\n</mermaid>", "Class diagrams": "<description>\nThis class diagram represents the process of class inheritance in object-oriented programming, specifically illustrating the relationship between a base class \"Animal\" and its derived classes \"Duck,\" \"Fish,\" and \"Zebra.\" The diagram is structured as follows:\n\n1. **Base Class: Animal**\n   - Attributes:\n     - `+int age`: An integer representing the age of the animal.\n     - `+String gender`: A string representing the gender of the animal.\n   - Methods:\n     - `+isMammal()`: A method to check if the animal is a mammal.\n     - `+mate()`: A method to handle the mating behavior of the animal.\n\n2. **Derived Classes:**\n   - **Duck**\n     - Attributes:\n       - `+String beakColor`: A string representing the color of the duck's beak.\n     - Methods:\n       - `+swim()`: A method to enable the duck to swim.\n       - `+quack()`: A method to enable the duck to quack.\n   \n   - **Fish**\n     - Attributes:\n       - `-int sizeInFeet`: An integer representing the size of the fish in feet.\n     - Methods:\n       - `-canEat()`: A method to determine if the fish can eat.\n   \n   - **Zebra**\n     - Attributes:\n       - `+bool is_wild`: A boolean indicating if the zebra is wild.\n     - Methods:\n       - `+run()`: A method to enable the zebra to run.\n\nThe class diagram uses arrows to indicate inheritance, showing that \"Duck,\" \"Fish,\" and \"Zebra\" inherit from the \"Animal\" class. Each derived class has its own specific attributes and methods in addition to those inherited from the base class.\n</description>\n\n<mermaid>\nclassDiagram\n    Animal <|-- Duck\n    Animal <|-- Fish\n    Animal <|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n      +String beakColor\n      +swim()\n      +quack()\n    }\n    class Fish{\n      -int sizeInFeet\n      -canEat()\n    }\n    class Zebra{\n      +bool is_wild\n      +run()\n    }\n</mermaid>", "State diagrams": "<description>\nThis state diagram represents the process of state transitions for an object, such as a vehicle, through different states: Still, Moving, and Crash.\n\n1. **Start State**:\n   - The diagram begins with a filled black circle, indicating the initial state.\n\n2. **Still State**:\n   - The object starts in the \"Still\" state.\n   - From the \"Still\" state, the object can transition to the \"Moving\" state.\n\n3. **Moving State**:\n   - Once in the \"Moving\" state, the object can either:\n     - Transition back to the \"Still\" state.\n     - Proceed to the \"Crash\" state.\n\n4. **Crash State**:\n   - In the \"Crash\" state, the object can transition back to the \"Still\" state.\n\n5. **End State**:\n   - The diagram concludes with a circle containing a smaller filled circle, indicating the final state.\n\nThe arrows indicate the possible transitions between these states, illustrating how the object can move from one state to another based on certain conditions or events.\n</description>\n\n<mermaid>\nstateDiagram\n    [*] --> Still\n    Still --> [*]\n    Still --> Moving\n    Moving --> Still\n    Moving --> Crash\n    Crash --> [*]\n</mermaid>", "Gantt diagrams": "<description>\nThis gantt diagram represents the process of task scheduling and progress tracking using a Gantt chart. The chart visually outlines tasks over a specified time period, highlighting their start and end dates as well as their duration.\n\n1. **Sections**:\n   - The chart is divided into two main sections: \"Section\" and \"Another.\"\n\n2. **Tasks in Section**:\n   - **A task**: Spans from January 5, 2014, to February 2, 2014.\n   - **Task in sec**: Starts on January 12, 2014, and ends on February 2, 2014.\n\n3. **Tasks in Another**:\n   - **another task**: Begins on January 5, 2014, and concludes on February 16, 2014.\n\n4. **Timeline**:\n   - The timeline at the bottom of the chart marks important dates, such as January 5, 2014, January 12, 2014, January 19, 2014, January 26, 2014, February 2, 2014, February 9, 2014, and February 16, 2014.\n\nThe Gantt chart uses horizontal bars to represent the duration of each task, with the length of each bar corresponding to the time span of the task. The interactions between tasks are indicated by their relative positions and overlaps on the timeline, providing a clear visual representation of the project schedule and dependencies.\n</description>\n\n<mermaid>\ngantt\n    title A Gantt Diagram\n    dateFormat  YYYY-MM-DD\n    section Section\n    A task           :a1, 2014-01-01, 30d\n    Another task     :after a1  , 20d\n    section Another\n    Task in sec      :2014-01-12  , 12d\n    another task      : 24d\n</mermaid>", "Entity Relationship Diagrams": "<description>\nThis entity relationship diagram represents the process of order management, illustrating the relationships between different entities involved in placing and processing an order. The diagram includes the following components and interactions:\n\nEntities:\n\nCUSTOMER: The individual who places the order.\nDELIVERY-ADDRESS: The address where the order will be delivered.\nORDER: The request made by the customer to purchase products.\nINVOICE: The bill issued for the order.\nPRODUCT-CATEGORY: The classification of products.\nPRODUCT: The items that are ordered.\nORDER-ITEM: The specific items included in the order.\nRelationships:\n\nCUSTOMER:\nPlaces an order (places).\nHas a delivery address (has).\nIs liable for the invoice (liable for).\nDELIVERY-ADDRESS:\nReceives the order (receives).\nORDER:\nIncludes order items (includes).\nIs covered by the invoice (covers).\nINVOICE:\nCovers the order (covers).\nPRODUCT-CATEGORY:\nContains products (contains).\nPRODUCT:\nIs ordered in order items (ordered in).\nORDER-ITEM:\nIs included in the order (includes).\nThe entity relationship uses arrows to show the direction of relationships and interactions between these entities, providing a clear visual representation of the order management process. Each entity is represented by a green box, and the relationships are labeled with descriptive text to explain the nature of the interaction.\n</description>\n\n<mermaid>\nerDiagram\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : has\n    CUSTOMER ||--o{ ORDER : places\n    CUSTOMER ||--o{ INVOICE : \"liable for\"\n    DELIVERY-ADDRESS ||--o{ ORDER : receives\n    INVOICE ||--|{ ORDER : covers\n    ORDER ||--|{ ORDER-ITEM : includes\n    PRODUCT-CATEGORY ||--|{ PRODUCT : contains\n    PRODUCT ||--o{ ORDER-ITEM : \"ordered in\"\n</mermaid>", "XY Chart": "<description>\nThis xy chart represents the process of tracking sales revenue over the course of a year. The chart combines a bar graph and a line graph to illustrate monthly revenue figures.\n\n1. **Title**:\n   - \"Sales Revenue\"\n\n2. **Axes**:\n   - **Vertical Axis** (Y-axis): Represents revenue in dollars ($), with increments of 500, ranging from 4000 to 11000.\n   - **Horizontal Axis** (X-axis): Represents the months of the year, from January (jan) to December (dec).\n\n3. **Data Representation**:\n   - **Bar Graph**: The green bars represent the revenue for each month. The height of each bar corresponds to the revenue amount.\n   - **Line Graph**: A red line connects the top of each bar, providing a visual representation of the trend in revenue over the year.\n\n4. **Monthly Revenue**:\n   - The revenue starts at around $5000 in January.\n   - It increases steadily each month, peaking in July at around $10500.\n   - After July, the revenue begins to decline, reaching approximately $4500 in December.\n\nThe xy chart clearly shows the seasonal trend in sales revenue, with a significant increase during the middle of the year and a decline towards the end. This visual representation helps in understanding the monthly performance and identifying peak revenue periods.\n</description>\n\n<mermaid>\nxychart-beta\n    title \"Sales Revenue\"\n    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]\n    y-axis \"Revenue (in $)\" 4000 --> 11000\n    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n</mermaid>", "Pie chart diagrams": "<description>\nThis pie chart represents the process of pet adoption by volunteers, illustrating the distribution of different types of pets adopted. The diagram is a pie chart with the following details:\n\nTitle:\n\n\"Pets adopted by volunteers\"\nCategories:\n\nDogs: Represented by a large section of the pie chart, accounting for 79% of the total adoptions.\nCats: Represented by a mid-sized section, accounting for 17% of the total adoptions.\nRats: Represented by a small section, accounting for 3% of the total adoptions.\nLegend:\n\nThe legend on the right side of the chart uses different shades of green to differentiate between the categories:\nLight green for Dogs.\nMedium green for Cats.\nDark green for Rats.\nThe pie chart visually demonstrates the proportion of each type of pet adopted by volunteers, with the majority being dogs, followed by cats and a small percentage of rats.\n</description>\n\n<mermaid>\npie title Pets adopted by volunteers\n    \"Dogs\" : 386\n    \"Cats\" : 85\n    \"Rats\" : 15\n</mermaid>", "Quadrant Chart": "<description>\nThis quadrant chart represents the process of evaluating the reach and engagement of various campaigns that categorizes campaigns based on their reach (horizontal axis) and engagement (vertical axis). The chart is divided into four quadrants, each representing a different strategy for the campaigns:\n\n1. **Quadrants**:\n    - **Need to promote** (High Engagement, Low Reach):\n        - Campaign F\n        - Campaign A\n    - **We should expand** (High Engagement, High Reach):\n        - Campaign C\n    - **Re-evaluate** (Low Engagement, Low Reach):\n        - Campaign E\n        - Campaign B\n    - **May be improved** (Low Engagement, High Reach):\n        - Campaign D\n\n2. **Axes**:\n    - **Vertical Axis**: Represents Engagement, ranging from Low Engagement at the bottom to High Engagement at the top.\n    - **Horizontal Axis**: Represents Reach, ranging from Low Reach on the left to High Reach on the right.\n\n3. **Campaigns**:\n    - Each campaign is represented by a black dot and labeled accordingly:\n        - Campaign A, B, C, D, E, and F.\n\n4. **Labels**:\n    - Each quadrant is labeled to indicate the suggested action for the campaigns within it:\n        - \"Need to promote\" for campaigns with high engagement but low reach.\n        - \"We should expand\" for campaigns with both high engagement and high reach.\n        - \"Re-evaluate\" for campaigns with both low engagement and low reach.\n        - \"May be improved\" for campaigns with high reach but low engagement.\n\nThe quadrant chart visually demonstrates the performance of each campaign in terms of reach and engagement, helping to identify which campaigns need more promotion, which should be expanded, which need re-evaluation, and which may be improved.\n</description>\n\n<mermaid>\nquadrantChart\n    title Reach and engagement of campaigns\n    x-axis Low Reach --> High Reach\n    y-axis Low Engagement --> High Engagement\n    quadrant-1 We should expand\n    quadrant-2 Need to promote\n    quadrant-3 Re-evaluate\n    quadrant-4 May be improved\n    Campaign A: [0.3, 0.6]\n    Campaign B: [0.45, 0.23]\n    Campaign C: [0.57, 0.69]\n    Campaign D: [0.78, 0.34]\n    Campaign E: [0.40, 0.34]\n    Campaign F: [0.35, 0.78]\n</mermaid>"}